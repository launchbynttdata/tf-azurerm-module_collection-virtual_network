// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//Variables required by network module

variable "use_for_each" {
  type        = bool
  default     = true
  description = "(Required)Use `for_each` instead of `count` to create multiple resource instances."
}

variable "address_space" {
  type        = list(string)
  default     = ["10.0.0.0/16"]
  description = "(Optional)The address space that is used by the virtual network."
}

variable "bgp_community" {
  type        = string
  default     = null
  description = "(Optional) The BGP community attribute in format `<as-number>:<community-value>`."
}

variable "ddos_protection_plan" {
  type = object(
    {
      enable = bool
      id     = string
    }
  )
  default     = null
  description = "The set of DDoS protection plan configuration"
}

variable "dns_servers" {
  type        = list(string)
  default     = []
  description = "The DNS servers to be used with vNet."
}

variable "nsg_ids" {
  type        = map(string)
  default     = {}
  description = "A map of subnet name to Network Security Group IDs"
}

variable "route_tables_ids" {
  type        = map(string)
  default     = {}
  description = " A map of subnet name to Route table ids"
}

variable "subnet_delegation" {
  type        = map(map(any))
  default     = {}
  description = "A map of subnet name to delegation block on the subnet"
}

variable "subnet_enforce_private_link_endpoint_network_policies" {
  type        = map(bool)
  default     = {}
  description = "A map of subnet name to enable/disable private link endpoint network policies on the subnet."
}

variable "subnet_enforce_private_link_service_network_policies" {
  type        = map(bool)
  default     = {}
  description = "A map of subnet name to enable/disable private link service network policies on the subnet"
}

variable "subnet_prefixes" {
  type        = list(string)
  description = "(Required) The address prefix to use for the subnet."
}

variable "subnet_service_endpoints" {
  type        = map(list(string))
  default     = {}
  description = "(Optional) A map with key (string) `subnet name`, value (list(string)) to indicate enabled service endpoints on the subnet."
}

variable "tags" {
  type        = map(string)
  default     = { "environment" : "dev" }
  description = "(Optional) The tags to associate with your network and subnets."
}

variable "tracing_tags_enabled" {
  type        = bool
  default     = false
  description = "(Optional) Whether enable tracing tags that generated by BridgeCrew Yor."
}

variable "tracing_tags_prefix" {
  type        = string
  default     = "avm"
  description = "(Optional) Default prefix for generated tracing tags."
}

variable "subnet_names" {
  type        = list(string)
  default     = []
  description = "(Optional) The names of the subnets to be created."
}


// Variables required by security group module
variable "network_security_groups" {
  type = map(object({
    name = string
    tags = optional(map(string))
    custom_rules = optional(list(object({
      name                       = string
      priority                   = number
      direction                  = string
      access                     = string
      protocol                   = string
      source_port_range          = string
      destination_port_range     = string
      source_address_prefix      = string
      destination_address_prefix = string
      description                = string
    })))
    destination_address_prefix   = optional(list(string))
    destination_address_prefixes = optional(list(string))
    predefined_rules             = optional(any)
    rules                        = optional(map(any))
    source_address_prefix        = optional(list(string))
    source_address_prefixes      = optional(list(string))
  }))
  default     = {}
  description = "Map containing subnet name as key and network security group object as value"
}

//variables required by resource names module
variable "resource_names_map" {
  description = "A map of key to resource_name that will be used by tf-module-resource_name to generate resource names"
  type = map(object({
    name       = string
    max_length = optional(number, 60)
  }))

  default = {
    resource_group = {
      name       = "rg"
      max_length = 90
    }
    virtual_network = {
      name       = "vnet"
      max_length = 80
    }
    subnet_1 = {
      name       = "sbnet1"
      max_length = 80
    }
    subnet_2 = {
      name       = "sbnet2"
      max_length = 80
    }
  }
}

variable "naming_prefix" {
  description = "Prefix for the provisioned resources."
  type        = string
  default     = "platform"
}

variable "environment" {
  description = "Environment in which the resource should be provisioned like dev, qa, prod etc."
  type        = string
  default     = "dev"
}

variable "environment_number" {
  description = "The environment count for the respective environment. Defaults to 000. Increments in value of 1"
  default     = "001"
}

variable "resource_number" {
  description = "The resource count for the respective resource. Defaults to 000. Increments in value of 1"
  default     = "001"
}

variable "region" {
  description = "AWS Region in which the infra needs to be provisioned"
  default     = "eastus2"
}

variable "logical_product_family" {
  type        = string
  description = <<EOF
    (Required) Name of the product family for which the resource is created.
    Example: org_name, department_name.
  EOF
  nullable    = false

  validation {
    condition     = can(regex("^[_\\-A-Za-z0-9]+$", var.logical_product_family))
    error_message = "The variable must contain letters, numbers, -, _, and .."
  }

  default = "launch"
}

variable "logical_product_service" {
  type        = string
  description = <<EOF
    (Required) Name of the product service for which the resource is created.
    For example, backend, frontend, middleware etc.
  EOF
  nullable    = false

  validation {
    condition     = can(regex("^[_\\-A-Za-z0-9]+$", var.logical_product_service))
    error_message = "The variable must contain letters, numbers, -, _, and .."
  }

  default = "network"
}
